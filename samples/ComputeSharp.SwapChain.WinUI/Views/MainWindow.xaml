<Window x:Class="ComputeSharp.SwapChain.WinUI.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:animations="using:CommunityToolkit.WinUI.UI.Animations"
        xmlns:computesharp="using:ComputeSharp.WinUI"
        xmlns:controls="using:CommunityToolkit.WinUI.UI.Controls"
        xmlns:converters="using:ComputeSharp.SwapChain.Core.Converters"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:media="using:CommunityToolkit.WinUI.UI.Media"
        xmlns:ui="using:CommunityToolkit.WinUI.UI"
        xmlns:viewmodels="using:ComputeSharp.SwapChain.Core.ViewModels"
        SizeChanged="UserControl_SizeChanged"
        mc:Ignorable="d">

    <Grid x:Name="Root">
        <Grid.Resources>

            <!--
                Shader selection panel. This is declared as a resource and then added and removed to the visual
                tree entirely instead of just changing its visibility, so that the loaded panels can detect the
                change and stop their render loops. This avoids wasting GPU resources when the panel isn't visible.
            -->
            <Border x:Key="ShaderSelectionPanel"
                    x:Name="ShaderSelectionPanel"
                    IsTapEnabled="True"
                    Tapped="ShaderSelectionPanel_Tapped">
                <animations:Implicit.ShowAnimations>
                    <animations:OpacityAnimation From="0"
                                                 To="1.0"
                                                 Duration="0:0:0.5" />
                </animations:Implicit.ShowAnimations>
                <animations:Implicit.HideAnimations>
                    <animations:OpacityAnimation From="1.0"
                                                 To="0"
                                                 Duration="0:0:0.5" />
                </animations:Implicit.HideAnimations>
                <Border.Background>
                    <media:AcrylicBrush BlurAmount="12"
                                        TextureUri="ms-appx:///Assets/Misc/noise_low.png"
                                        TintColor="#FF222222"
                                        TintOpacity="0.2" />
                </Border.Background>

                <!--  Shadow panel with the shaders list  -->
                <Border x:Name="ShadersListContainerPanel"
                        Height="320"
                        Margin="-20,0,-20,0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Bottom"
                        Background="#FF222222">
                    <animations:Implicit.ShowAnimations>
                        <animations:TranslationAnimation From="0,320,0"
                                                         To="0"
                                                         Duration="0:0:0.5" />
                    </animations:Implicit.ShowAnimations>
                    <animations:Implicit.HideAnimations>
                        <animations:TranslationAnimation From="0"
                                                         To="0,320,0"
                                                         Duration="0:0:0.5" />
                    </animations:Implicit.HideAnimations>
                    <ui:Effects.Shadow>
                        <media:AttachedCardShadow BlurRadius="20"
                                                  CornerRadius="0"
                                                  Opacity="1"
                                                  Offset="-12,-2"
                                                  Color="Black" />
                    </ui:Effects.Shadow>

                    <!--  Shaders list  -->
                    <ListView ItemsSource="{x:Bind ViewModel.ComputeShaderOptions}"
                              ScrollViewer.HorizontalScrollBarVisibility="Auto"
                              ScrollViewer.HorizontalScrollMode="Enabled"
                              ScrollViewer.VerticalScrollBarVisibility="Hidden"
                              ScrollViewer.VerticalScrollMode="Disabled"
                              SelectedItem="{x:Bind ViewModel.SelectedComputeShader, Mode=TwoWay}"
                              SelectionMode="Single">
                        <ListView.Resources>

                            <!--
                                Lightweight styling to remove the selection background with the accent color, and
                                to remove the padding and stretch the list items to occupy all the available space
                            -->
                            <SolidColorBrush x:Key="ListViewItemBackgroundSelected" Color="Transparent" />
                            <SolidColorBrush x:Key="ListViewItemBackgroundSelectedPointerOver" Color="Transparent" />
                            <SolidColorBrush x:Key="ListViewItemBackgroundSelectedPressed" Color="Transparent" />
                            <Style TargetType="ListViewItem">
                                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                <Setter Property="VerticalContentAlignment" Value="Stretch" />
                                <Setter Property="HorizontalAlignment" Value="Stretch" />
                                <Setter Property="VerticalAlignment" Value="Stretch" />
                                <Setter Property="Padding" Value="0" />
                            </Style>
                        </ListView.Resources>
                        <ListView.ItemsPanel>
                            <ItemsPanelTemplate>
                                <ItemsStackPanel Orientation="Horizontal" />
                            </ItemsPanelTemplate>
                        </ListView.ItemsPanel>
                        <ListView.ItemTemplate>

                            <!--  Shader template  -->
                            <DataTemplate x:DataType="viewmodels:ShaderRunnerViewModel">
                                <controls:ConstrainedBox HorizontalAlignment="Stretch"
                                                         VerticalAlignment="Stretch"
                                                         ui:UIElementExtensions.ClipToBounds="True"
                                                         AspectRatio="16:9">
                                    <Grid>

                                        <!--  Shader preview  -->
                                        <computesharp:AnimatedComputeShaderPanel Loaded="AnimatedComputeShaderPanel_Loaded" ShaderRunner="{x:Bind ShaderRunner}" />

                                        <!--
                                            Note: here we have a selection property to work around {x:Bind} not working correctly outside of the
                                            current template scope. Once that's fixed in WinUI 3, this can be rewritten as a multi-binding like this:
                                            Visibility="{x:Bind system:Object.ReferenceEquals((local:ComputeShader), ViewModel.SelectedComputeShader), Mode=OneWay}".
                                            When that is working, the ComputeShader.IsSelected property can also be removed, as it will no longer be needed.
                                        -->
                                        <Border BorderBrush="White"
                                                BorderThickness="4"
                                                Visibility="{x:Bind IsSelected, Mode=OneWay}">
                                            <Polygon HorizontalAlignment="Right"
                                                     VerticalAlignment="Top"
                                                     Fill="White"
                                                     Points="0,0 32,0 32,32" />
                                        </Border>

                                        <TextBlock Margin="12,10,4,0"
                                                   FontSize="18"
                                                   FontWeight="Bold"
                                                   Foreground="Black"
                                                   Text="{x:Bind ShaderType.Name}" />
                                        <TextBlock Margin="10,8,4,0"
                                                   FontSize="18"
                                                   FontWeight="Bold"
                                                   Foreground="White"
                                                   Text="{x:Bind ShaderType.Name}" />
                                    </Grid>
                                </controls:ConstrainedBox>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>
                </Border>
            </Border>
        </Grid.Resources>

        <!--  Shader  -->
        <computesharp:AnimatedComputeShaderPanel x:Name="ShaderPanel"
                                                 Grid.Row="1"
                                                 IsDynamicResolutionEnabled="{x:Bind ViewModel.IsDynamicResolutionEnabled, Mode=OneWay}"
                                                 IsPaused="{x:Bind ViewModel.IsRenderingPaused, Mode=OneWay}"
                                                 IsVerticalSyncEnabled="{x:Bind ViewModel.IsVerticalSyncEnabled, Mode=OneWay}"
                                                 PointerMoved="ShaderPanel_PointerMoved"
                                                 ResolutionScale="{x:Bind converters:ResolutionScaleConverter.ConvertPercentageToScale(ViewModel.SelectedResolutionScale), Mode=OneWay}"
                                                 ShaderRunner="{x:Bind ViewModel.SelectedComputeShader.ShaderRunner, Mode=OneWay}" />

        <!--  Control Panel  -->
        <StackPanel Margin="48"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Orientation="Horizontal"
                    Spacing="20">

            <!--  TODO: Full screen button  -->

            <!--  Exit button  -->
            <Button Padding="20"
                    Click="CloseApplicationButton_Click"
                    CornerRadius="9999"
                    ToolTipService.ToolTip="Close application">
                <SymbolIcon Symbol="Cancel" />
            </Button>
        </StackPanel>

        <!--  Settings panel  -->
        <StackPanel Margin="48"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Bottom"
                    Orientation="Horizontal"
                    Spacing="20">

            <!--  Shader pause button  -->
            <Button Padding="20"
                    Command="{x:Bind ViewModel.ToggleRenderingPausedCommand}"
                    CornerRadius="9999"
                    ToolTipService.ToolTip="Pause shader">
                <SymbolIcon Symbol="{x:Bind converters:RenderingPauseConverter.ConvertPausedToSymbol(ViewModel.IsRenderingPaused), Mode=OneWay}" />
            </Button>

            <!--  Shader selection button  -->
            <Button Padding="20"
                    Click="OpenShaderSelectionPanelButton_Click"
                    CornerRadius="9999"
                    ToolTipService.ToolTip="Select shader">
                <SymbolIcon Symbol="Pictures" />
            </Button>

            <!--  Settings button  -->
            <Button Padding="20"
                    CornerRadius="9999"
                    ToolTipService.ToolTip="Settings">
                <SymbolIcon Symbol="Setting" />
                <Button.Flyout>
                    <MenuFlyout>
                        <MenuFlyoutSubItem Text="Color Inputs">
                            <MenuFlyoutItem Command="{x:Bind ViewModel.OpenColorPickerCommand}" Text="Color 1">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Int32>0</x:Int32>
                                </MenuFlyoutItem.CommandParameter>
                                <MenuFlyoutItem.Icon>
                                    <FontIcon FontFamily="Segoe UI"
                                              Foreground="{x:Bind converters:ColorConverter.ConvertColorToBrush(ViewModel.ColorOne), Mode=OneWay}"
                                              Glyph="&#x25A0;" />
                                </MenuFlyoutItem.Icon>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem Command="{x:Bind ViewModel.OpenColorPickerCommand}" Text="Color 2">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Int32>1</x:Int32>
                                </MenuFlyoutItem.CommandParameter>
                                <MenuFlyoutItem.Icon>
                                    <FontIcon FontFamily="Segoe UI"
                                              Foreground="{x:Bind converters:ColorConverter.ConvertColorToBrush(ViewModel.ColorTwo), Mode=OneWay}"
                                              Glyph="&#x25A0;" />
                                </MenuFlyoutItem.Icon>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem Command="{x:Bind ViewModel.OpenColorPickerCommand}" Text="Color 3">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Int32>2</x:Int32>
                                </MenuFlyoutItem.CommandParameter>
                                <MenuFlyoutItem.Icon>
                                    <FontIcon FontFamily="Segoe UI"
                                              Foreground="{x:Bind converters:ColorConverter.ConvertColorToBrush(ViewModel.ColorThree), Mode=OneWay}"
                                              Glyph="&#x25A0;" />
                                </MenuFlyoutItem.Icon>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem Command="{x:Bind ViewModel.OpenColorPickerCommand}" Text="Color 4">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Int32>3</x:Int32>
                                </MenuFlyoutItem.CommandParameter>
                                <MenuFlyoutItem.Icon>
                                    <FontIcon FontFamily="Segoe UI"
                                              Foreground="{x:Bind converters:ColorConverter.ConvertColorToBrush(ViewModel.ColorFour), Mode=OneWay}"
                                              Glyph="&#x25A0;" />
                                </MenuFlyoutItem.Icon>
                            </MenuFlyoutItem>
                        </MenuFlyoutSubItem>
                        <MenuFlyoutSeparator />
                        <ToggleMenuFlyoutItem IsChecked="{x:Bind ViewModel.IsDynamicResolutionEnabled, Mode=TwoWay}" Text="Dynamic resolution" />
                        <MenuFlyoutSeparator />
                        <ToggleMenuFlyoutItem Command="{x:Bind ViewModel.SetResolutionScaleCommand}"
                                              CommandParameter="{x:Bind ViewModel.ResolutionScaleOptions[0]}"
                                              IsChecked="{x:Bind ViewModel.SelectedResolutionScale.Equals(ViewModel.ResolutionScaleOptions[0]), Mode=OneWay}"
                                              Text="{x:Bind converters:ResolutionScaleConverter.ConvertPercentageToFormattedString(ViewModel.ResolutionScaleOptions[0])}" />
                        <ToggleMenuFlyoutItem Command="{x:Bind ViewModel.SetResolutionScaleCommand}"
                                              CommandParameter="{x:Bind ViewModel.ResolutionScaleOptions[1]}"
                                              IsChecked="{x:Bind ViewModel.SelectedResolutionScale.Equals(ViewModel.ResolutionScaleOptions[1]), Mode=OneWay}"
                                              Text="{x:Bind converters:ResolutionScaleConverter.ConvertPercentageToFormattedString(ViewModel.ResolutionScaleOptions[1])}" />
                        <ToggleMenuFlyoutItem Command="{x:Bind ViewModel.SetResolutionScaleCommand}"
                                              CommandParameter="{x:Bind ViewModel.ResolutionScaleOptions[2]}"
                                              IsChecked="{x:Bind ViewModel.SelectedResolutionScale.Equals(ViewModel.ResolutionScaleOptions[2]), Mode=OneWay}"
                                              Text="{x:Bind converters:ResolutionScaleConverter.ConvertPercentageToFormattedString(ViewModel.ResolutionScaleOptions[2])}" />
                        <ToggleMenuFlyoutItem Command="{x:Bind ViewModel.SetResolutionScaleCommand}"
                                              CommandParameter="{x:Bind ViewModel.ResolutionScaleOptions[3]}"
                                              IsChecked="{x:Bind ViewModel.SelectedResolutionScale.Equals(ViewModel.ResolutionScaleOptions[3]), Mode=OneWay}"
                                              Text="{x:Bind converters:ResolutionScaleConverter.ConvertPercentageToFormattedString(ViewModel.ResolutionScaleOptions[3])}" />
                    </MenuFlyout>
                </Button.Flyout>
            </Button>
        </StackPanel>

        <!--  Color Input Picker 'Dialog'  -->
        <Grid HorizontalAlignment="Center"
              VerticalAlignment="Center"
              Background="#99999999"
              CornerRadius="32"
              Visibility="{x:Bind ViewModel.IsPickingColor, Mode=OneWay}">
            <TextBlock Margin="16,12"
                       HorizontalAlignment="Left"
                       VerticalAlignment="Top"
                       FontSize="32"
                       FontWeight="Bold"
                       Text="Pick Color" />
            <Button Margin="12"
                    Padding="12"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Command="{x:Bind ViewModel.CloseColorPickerCommand}"
                    CornerRadius="9999"
                    ToolTipService.ToolTip="Close Color Picker">
                <SymbolIcon Symbol="Cancel" />
            </Button>
            <controls:ColorPicker Margin="8,64,8,8" Color="{x:Bind ViewModel.ColorCurrent, Mode=TwoWay}" />
        </Grid>


        <!--  Invisible title bar  -->
        <Rectangle x:Name="TitleBarRectangle"
                   Height="28"
                   HorizontalAlignment="Stretch"
                   VerticalAlignment="Top"
                   Fill="Transparent" />
    </Grid>
</Window>
